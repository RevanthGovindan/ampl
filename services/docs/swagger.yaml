basePath: /
definitions:
  dao.Tasks:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  models.CreateTask:
    properties:
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  models.LoginRequest:
    properties:
      name:
        description: |-
          required: true
          example: ampl
        type: string
      password:
        description: |-
          required: true
          example: amplampl
        maxLength: 20
        minLength: 8
        type: string
    required:
    - name
    - password
    type: object
  models.LoginResponse:
    properties:
      name:
        type: string
      token:
        type: string
      type:
        type: string
    type: object
  models.MsgResponse:
    properties:
      msg:
        type: string
    type: object
  models.UpdateTask:
    properties:
      description:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
host: localhost:8000
info:
  contact: {}
  description: Module to manage tasks
  title: Tasks Services
  version: "1.0"
paths:
  /public/login:
    post:
      consumes:
      - application/json
      description: Login with name and password
      operationId: login
      parameters:
      - description: Task data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
      summary: Login
      tags:
      - Login
  /public/tasks:
    get:
      consumes:
      - application/json
      description: Get all the tasks
      operationId: get-task
      parameters:
      - description: Page no, if empty it will be 0
        in: query
        name: pageNo
        type: string
      - description: limit of records, if empty everything will sent in single shot
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dao.Tasks'
            type: array
      summary: Get All Task
      tags:
      - Tasks
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new task
      operationId: create-task
      parameters:
      - description: Task data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Tasks'
      security:
      - http_bearer: []
      summary: Create
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete task by id
      operationId: delete-task
      parameters:
      - description: Id of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MsgResponse'
      security:
      - http_bearer: []
      summary: Delete task
      tags:
      - Tasks
    get:
      consumes:
      - application/json
      description: Get a specific task by id
      operationId: get-task-id
      parameters:
      - description: Id of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Tasks'
      security:
      - http_bearer: []
      summary: Get Task
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      description: update existing task
      operationId: update-task
      parameters:
      - description: Task data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTask'
      - description: Id of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Tasks'
      security:
      - http_bearer: []
      summary: Update Task
      tags:
      - Tasks
schemes:
- http
securityDefinitions:
  http_bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Tasks services
  name: Tasks
- description: Login services
  name: Login
